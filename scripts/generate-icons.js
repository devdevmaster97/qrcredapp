const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

const sizes = [192, 512];
const inputFile = path.join(__dirname, '../public/icons/logo.png');
const outputDir = path.join(__dirname, '../public/icons');

async function generateIcons() {
  // Verificar se o arquivo de origem existe
  if (!fs.existsSync(inputFile)) {
    console.error(`‚ùå Arquivo de entrada n√£o encontrado: ${inputFile}`);
    console.log('üìÅ Certifique-se de que o arquivo logo.png est√° na pasta public/icons/');
    return;
  }

  console.log(`üìç Usando arquivo de entrada: ${inputFile}`);
  
  for (const size of sizes) {
    const outputFile = path.join(outputDir, `icon-${size}x${size}.png`);
    
    try {
      await sharp(inputFile)
        .resize(size, size, {
          fit: 'contain',
          background: { r: 255, g: 255, b: 255, alpha: 0 } // Fundo transparente
        })
        .png({
          quality: 90,
          compressionLevel: 6
        })
        .toFile(outputFile);
        
      console.log(`‚úÖ Gerado: ${outputFile}`);
    } catch (error) {
      console.error(`‚ùå Erro ao gerar ${outputFile}:`, error.message);
    }
  }

  // Tamb√©m gerar um favicon baseado no logo
  try {
    const faviconFile = path.join(__dirname, '../app/favicon.png');
    await sharp(inputFile)
      .resize(32, 32, {
        fit: 'contain',
        background: { r: 255, g: 255, b: 255, alpha: 0 }
      })
      .png()
      .toFile(faviconFile);
      
    console.log(`‚úÖ Gerado favicon: ${faviconFile}`);
  } catch (error) {
    console.error(`‚ùå Erro ao gerar favicon:`, error.message);
  }

  console.log('\nüéâ Processo de gera√ß√£o de √≠cones conclu√≠do!');
  console.log('üìù Para que as mudan√ßas tenham efeito:');
  console.log('   1. Limpe o cache do navegador');
  console.log('   2. Reinstale o PWA se j√° estiver instalado');
}

generateIcons().catch(console.error); 