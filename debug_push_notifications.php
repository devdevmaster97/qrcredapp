<?php
/**
 * Script de Debug para Push Notifications
 * Execute este script para diagnosticar problemas
 */

header('Content-Type: text/html; charset=utf-8');
echo "<h1>üîç Debug Push Notifications</h1>\n";
echo "<pre>\n";

echo "=====================================\n";
echo "1. VERIFICA√á√ÉO DE ARQUIVOS\n";
echo "=====================================\n";

// Verificar arquivos necess√°rios
$arquivos = [
    'manage_push_subscriptions_app.php',
    'check_agendamentos_notifications_app.php', 
    'send_push_notification_app.php',
    'Adm/php/banco.php'
];

foreach ($arquivos as $arquivo) {
    if (file_exists($arquivo)) {
        echo "‚úÖ {$arquivo} - EXISTS\n";
    } else {
        echo "‚ùå {$arquivo} - NOT FOUND\n";
    }
}

echo "\n=====================================\n";
echo "2. TESTE DE CONEX√ÉO COM BANCO\n";
echo "=====================================\n";

try {
    if (file_exists('Adm/php/banco.php')) {
        require_once 'Adm/php/banco.php';
        /** @noinspection PhpUndefinedClassInspection */
        /** @var PDO $pdo */
        $pdo = Banco::conectar_postgres();
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        echo "‚úÖ Conex√£o com PostgreSQL: SUCESSO\n";
        
        // Testar query simples
        $stmt = $pdo->query("SELECT NOW() as timestamp");
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        echo "‚úÖ Query de teste: {$result['timestamp']}\n";
        
    } else {
        echo "‚ùå Arquivo Adm/php/banco.php n√£o encontrado\n";
    }
} catch (Exception $e) {
    echo "‚ùå Erro de conex√£o: {$e->getMessage()}\n";
}

echo "\n=====================================\n";
echo "3. VERIFICA√á√ÉO DE TABELAS\n";
echo "=====================================\n";

try {
    if (isset($pdo)) {
        $tabelas = ['push_subscriptions', 'notification_log', 'notification_queue'];
        
        foreach ($tabelas as $tabela) {
            try {
                $stmt = $pdo->query("SELECT COUNT(*) as count FROM {$tabela}");
                $count = $stmt->fetch(PDO::FETCH_ASSOC)['count'];
                echo "‚úÖ Tabela '{$tabela}': {$count} registros\n";
            } catch (PDOException $e) {
                echo "‚ùå Tabela '{$tabela}': ERRO - {$e->getMessage()}\n";
            }
        }
    }
} catch (Exception $e) {
    echo "‚ùå Erro ao verificar tabelas: {$e->getMessage()}\n";
}

echo "\n=====================================\n";
echo "4. TESTE DO ENDPOINT PHP\n";
echo "=====================================\n";

if (file_exists('manage_push_subscriptions_app.php')) {
    echo "‚úÖ manage_push_subscriptions_app.php existe\n";
    
    // Simular uma requisi√ß√£o POST
    $_POST = [
        'action' => 'test',
        'user_card' => '123456'
    ];
    
    echo "üß™ Simulando requisi√ß√£o POST...\n";
    
    try {
        // Capturar output
        ob_start();
        include 'manage_push_subscriptions_app.php';
        $output = ob_get_clean();
        
        echo "üì§ Output do PHP:\n";
        echo $output . "\n";
        
    } catch (Exception $e) {
        echo "‚ùå Erro ao executar PHP: {$e->getMessage()}\n";
    }
    
} else {
    echo "‚ùå manage_push_subscriptions_app.php N√ÉO EXISTE\n";
    echo "‚ö†Ô∏è Este arquivo √© necess√°rio para o sistema funcionar!\n";
}

echo "\n=====================================\n";
echo "5. LOGS DE ERROR_LOG\n";
echo "=====================================\n";

// Tentar ler √∫ltimas linhas do log de erros PHP
$logFiles = [
    '/var/log/php_errors.log',
    '/var/log/apache2/error.log', 
    '/var/log/nginx/error.log',
    '/tmp/php_errors.log',
    'error_log'
];

$foundLog = false;
foreach ($logFiles as $logFile) {
    if (file_exists($logFile) && is_readable($logFile)) {
        echo "üìã √öltimas 10 linhas de: {$logFile}\n";
        echo "-----------------------------------\n";
        $lines = file($logFile);
        $lastLines = array_slice($lines, -10);
        foreach ($lastLines as $line) {
            echo htmlspecialchars($line);
        }
        echo "-----------------------------------\n\n";
        $foundLog = true;
        break;
    }
}

if (!$foundLog) {
    echo "‚ö†Ô∏è Nenhum arquivo de log encontrado nos locais padr√£o\n";
}

echo "\n=====================================\n";
echo "6. INFORMA√á√ïES DO SERVIDOR\n";
echo "=====================================\n";

echo "PHP Version: " . phpversion() . "\n";
echo "Server Software: " . ($_SERVER['SERVER_SOFTWARE'] ?? 'N/A') . "\n";
echo "Document Root: " . ($_SERVER['DOCUMENT_ROOT'] ?? 'N/A') . "\n";
echo "Script Name: " . ($_SERVER['SCRIPT_NAME'] ?? 'N/A') . "\n";

echo "\n=====================================\n";
echo "üéØ RECOMENDA√á√ïES\n";
echo "=====================================\n";

echo "1. ‚úÖ Execute setup_notification_tables.php se alguma tabela n√£o existir\n";
echo "2. ‚úÖ Verifique se manage_push_subscriptions_app.php existe no servidor\n";
echo "3. ‚úÖ Configure chaves VAPID reais no frontend\n";
echo "4. ‚úÖ Verifique logs de erro do servidor web\n";
echo "5. ‚ùå DELETE este arquivo ap√≥s o debug\n";

echo "\n=====================================\n";
echo "üîß DEBUG CONCLU√çDO\n";
echo "=====================================\n";

echo "</pre>\n";
?>
