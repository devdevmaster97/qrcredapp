/**
 * Utilit√°rios para gerenciar notifica√ß√µes e verifica√ß√µes de ades√£o √† antecipa√ß√£o
 * Similar ao sascredNotifications.ts mas espec√≠fico para antecipa√ß√£o
 */

// Chaves do localStorage
const FORCE_CHECK_KEY = 'antecipacao_adesao_force_check';
const LAST_CHECK_KEY = 'antecipacao_adesao_last_check';
const POSSIBLE_SIGNATURE_KEY = 'antecipacao_possible_signature';
const ACCELERATED_CHECKING_KEY = 'antecipacao_accelerated_checking';

/**
 * Marca que uma verifica√ß√£o for√ßada de ades√£o √† antecipa√ß√£o deve ser feita
 */
export function forceAntecipacaoAdesaoCheck(): void {
  localStorage.setItem(FORCE_CHECK_KEY, Date.now().toString());
  console.log('üîî Antecipa√ß√£o: Marcada verifica√ß√£o for√ßada de ades√£o');
  
  // Disparar evento customizado para hooks que est√£o escutando
  window.dispatchEvent(new CustomEvent('forceAntecipacaoAdesaoCheck'));
}

/**
 * Verifica se deve for√ßar uma verifica√ß√£o de ades√£o √† antecipa√ß√£o
 */
export function shouldForceAntecipacaoAdesaoCheck(): boolean {
  const forceCheck = localStorage.getItem(FORCE_CHECK_KEY);
  const lastCheck = localStorage.getItem(LAST_CHECK_KEY);
  
  if (!forceCheck) return false;
  
  const forceTime = parseInt(forceCheck);
  const lastTime = lastCheck ? parseInt(lastCheck) : 0;
  
  // Se o force √© mais recente que a √∫ltima verifica√ß√£o
  return forceTime > lastTime;
}

/**
 * Marca que uma verifica√ß√£o de ades√£o √† antecipa√ß√£o foi realizada
 */
export function markAntecipacaoAdesaoChecked(): void {
  const now = Date.now().toString();
  localStorage.setItem(LAST_CHECK_KEY, now);
  
  // Limpar flag de verifica√ß√£o for√ßada se existir
  const forceCheck = localStorage.getItem(FORCE_CHECK_KEY);
  if (forceCheck) {
    localStorage.removeItem(FORCE_CHECK_KEY);
    console.log('üßπ Antecipa√ß√£o: Limpou flag de verifica√ß√£o for√ßada');
  }
}

/**
 * Marca que o usu√°rio pode ter assinado o contrato de antecipa√ß√£o (para polling acelerado)
 */
export function markPossibleAntecipacaoSignature(): void {
  localStorage.setItem(POSSIBLE_SIGNATURE_KEY, Date.now().toString());
  console.log('‚úçÔ∏è Antecipa√ß√£o: Marcada poss√≠vel assinatura digital');
}

/**
 * Verifica se h√° uma poss√≠vel assinatura de antecipa√ß√£o pendente
 */
export function hasPendingAntecipacaoSignatureCheck(): boolean {
  const possibleSignature = localStorage.getItem(POSSIBLE_SIGNATURE_KEY);
  if (!possibleSignature) return false;
  
  const signatureTime = parseInt(possibleSignature);
  const now = Date.now();
  
  // Considerar pendente se foi marcada h√° menos de 10 minutos
  return (now - signatureTime) < (10 * 60 * 1000);
}

/**
 * Limpa a marca√ß√£o de poss√≠vel assinatura de antecipa√ß√£o
 */
export function clearPossibleAntecipacaoSignature(): void {
  localStorage.removeItem(POSSIBLE_SIGNATURE_KEY);
  console.log('üßπ Antecipa√ß√£o: Limpou marca√ß√£o de poss√≠vel assinatura');
}

/**
 * Inicia verifica√ß√£o acelerada para detectar assinatura de antecipa√ß√£o
 */
export function startAcceleratedAntecipacaoChecking(): void {
  localStorage.setItem(ACCELERATED_CHECKING_KEY, Date.now().toString());
  console.log('‚ö° Antecipa√ß√£o: Iniciada verifica√ß√£o acelerada');
  
  // Disparar verifica√ß√µes mais frequentes
  const checkInterval = setInterval(() => {
    const startTime = localStorage.getItem(ACCELERATED_CHECKING_KEY);
    if (!startTime) {
      clearInterval(checkInterval);
      return;
    }
    
    const elapsed = Date.now() - parseInt(startTime);
    
    // Parar ap√≥s 5 minutos de verifica√ß√£o acelerada
    if (elapsed > 5 * 60 * 1000) {
      localStorage.removeItem(ACCELERATED_CHECKING_KEY);
      clearInterval(checkInterval);
      console.log('‚è∞ Antecipa√ß√£o: Verifica√ß√£o acelerada finalizada por timeout');
      return;
    }
    
    // Disparar verifica√ß√£o
    forceAntecipacaoAdesaoCheck();
    
  }, 3000); // Verificar a cada 3 segundos durante o per√≠odo acelerado
}

/**
 * Para a verifica√ß√£o acelerada de antecipa√ß√£o
 */
export function stopAcceleratedAntecipacaoChecking(): void {
  localStorage.removeItem(ACCELERATED_CHECKING_KEY);
  console.log('üõë Antecipa√ß√£o: Verifica√ß√£o acelerada interrompida');
}

/**
 * Dispara uma verifica√ß√£o de ades√£o √† antecipa√ß√£o
 */
export function triggerAntecipacaoAdesaoVerification(): void {
  console.log('üéØ Antecipa√ß√£o: Disparando verifica√ß√£o de ades√£o');
  forceAntecipacaoAdesaoCheck();
  
  // Tamb√©m disparar evento para componentes que est√£o escutando
  window.dispatchEvent(new CustomEvent('antecipacaoAdesaoStatusChanged'));
}

/**
 * Limpa todos os dados de verifica√ß√£o de ades√£o √† antecipa√ß√£o
 */
export function clearAllAntecipacaoAdesaoData(): void {
  localStorage.removeItem(FORCE_CHECK_KEY);
  localStorage.removeItem(LAST_CHECK_KEY);
  localStorage.removeItem(POSSIBLE_SIGNATURE_KEY);
  localStorage.removeItem(ACCELERATED_CHECKING_KEY);
  console.log('üßπ Antecipa√ß√£o: Todos os dados de verifica√ß√£o foram limpos');
}

/**
 * Debug: mostra o estado atual das verifica√ß√µes de antecipa√ß√£o
 */
export function debugAntecipacaoAdesaoState(): void {
  console.log('üîç Antecipa√ß√£o - Estado atual das verifica√ß√µes:', {
    forceCheck: localStorage.getItem(FORCE_CHECK_KEY),
    lastCheck: localStorage.getItem(LAST_CHECK_KEY),
    possibleSignature: localStorage.getItem(POSSIBLE_SIGNATURE_KEY),
    acceleratedChecking: localStorage.getItem(ACCELERATED_CHECKING_KEY),
    shouldForce: shouldForceAntecipacaoAdesaoCheck(),
    hasPending: hasPendingAntecipacaoSignatureCheck()
  });
}
