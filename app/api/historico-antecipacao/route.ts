import { NextRequest, NextResponse } from 'next/server';
import axios from 'axios';

export async function POST(request: NextRequest) {
  try {
    // Obter os dados da solicita√ß√£o
    let matricula, empregador, id_associado, divisao;
    
    try {
      const formData = await request.formData();
      matricula = formData.get('matricula')?.toString();
      empregador = formData.get('empregador')?.toString();
      id_associado = formData.get('id_associado')?.toString();
      divisao = formData.get('divisao')?.toString();
      console.log('Par√¢metros recebidos (FormData):', { matricula, empregador, id_associado, divisao });
    } catch (error) {
      // Se n√£o for FormData, tentar como JSON
      const data = await request.json();
      matricula = data.matricula;
      empregador = data.empregador;
      id_associado = data.id_associado;
      divisao = data.divisao;
      console.log('Par√¢metros recebidos (JSON):', { matricula, empregador, id_associado, divisao });
    }

    // Verificar par√¢metros obrigat√≥rios
    if (!matricula || !empregador || !id_associado || !divisao) {
      console.error('‚ùå Par√¢metros obrigat√≥rios ausentes:', { matricula, empregador, id_associado, divisao });
      return NextResponse.json(
        { error: 'Matr√≠cula, empregador, id_associado e divis√£o s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }
    
    // Validar formato dos par√¢metros
    if (typeof matricula !== 'string' || matricula.trim() === '') {
      console.error('‚ùå Matr√≠cula inv√°lida:', matricula);
      return NextResponse.json(
        { error: 'Matr√≠cula deve ser uma string n√£o vazia' },
        { status: 400 }
      );
    }
    
    if (isNaN(Number(empregador)) || Number(empregador) <= 0) {
      console.error('‚ùå Empregador inv√°lido:', empregador);
      return NextResponse.json(
        { error: 'Empregador deve ser um n√∫mero v√°lido' },
        { status: 400 }
      );
    }
    
    if (isNaN(Number(id_associado)) || Number(id_associado) <= 0) {
      console.error('‚ùå ID do associado inv√°lido:', id_associado);
      return NextResponse.json(
        { error: 'ID do associado deve ser um n√∫mero v√°lido' },
        { status: 400 }
      );
    }
    
    if (isNaN(Number(divisao)) || Number(divisao) <= 0) {
      console.error('‚ùå Divis√£o inv√°lida:', divisao);
      return NextResponse.json(
        { error: 'Divis√£o deve ser um n√∫mero v√°lido' },
        { status: 400 }
      );
    }
    
    console.log('üì§ Preparando requisi√ß√£o para o backend:');
    console.log('   - Matr√≠cula:', matricula, '(tipo:', typeof matricula, ')');
    console.log('   - Empregador:', empregador, '(tipo:', typeof empregador, ')');
    console.log('   - ID Associado:', id_associado, '(tipo:', typeof id_associado, ')');
    console.log('   - Divis√£o:', divisao, '(tipo:', typeof divisao, ')');
    console.log('   - URL:', 'https://sas.makecard.com.br/historico_antecipacao_app.php');
    console.log('   - M√©todo: GET (POST bloqueado pelo servidor)');
    
    // Teste de conectividade b√°sica
    console.log('üîç Testando conectividade com o servidor...');
    try {
      const testResponse = await axios.get('https://sas.makecard.com.br/', { timeout: 5000 });
      console.log('‚úÖ Servidor acess√≠vel - Status:', testResponse.status);
    } catch (testError) {
      console.log('‚ö†Ô∏è Servidor pode estar inacess√≠vel:', testError instanceof Error ? testError.message : 'Erro desconhecido');
    }
    
    // Tentar POST primeiro, se falhar com 403, tentar GET
    console.log('üîç Tentando requisi√ß√£o POST primeiro...');
    
    let response;
    try {
      // Preparar FormData para POST
      const formData = new FormData();
      formData.append('matricula', matricula);
      formData.append('empregador', empregador);
      formData.append('id_associado', id_associado);
      formData.append('divisao', divisao);
      
      response = await axios.post(
        'https://sas.makecard.com.br/historico_antecipacao_app.php',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
          timeout: 10000,
        }
      );
      console.log('‚úÖ POST bem-sucedido');
    } catch (postError) {
      if (axios.isAxiosError(postError) && postError.response?.status === 403) {
        console.log('‚ö†Ô∏è POST falhou com 403, tentando GET...');
        
        // Tentar GET como fallback usando FormData
        const getFormData = new FormData();
        getFormData.append('matricula', matricula);
        getFormData.append('empregador', empregador);
        getFormData.append('id_associado', id_associado);
        getFormData.append('divisao', divisao);
        
        response = await axios.request({
          method: 'GET',
          url: 'https://sas.makecard.com.br/historico_antecipacao_app.php',
          data: getFormData,
          headers: {
            'Content-Type': 'multipart/form-data',
          },
          timeout: 10000,
        });
        console.log('‚úÖ GET bem-sucedido');
      } else {
        throw postError;
      }
    }
    
    console.log('‚úÖ Resposta recebida do backend:', {
      status: response.status,
      statusText: response.statusText,
      dataType: typeof response.data,
      isArray: Array.isArray(response.data)
    });
    
    console.log('Resposta do backend:', response.data);
    
    // Verificar se a resposta √© um array
    if (Array.isArray(response.data)) {
      return NextResponse.json(response.data);
    } 
    
    // Se a resposta for um objeto √∫nico, converter para array
    if (response.data && typeof response.data === 'object') {
      // Se for um objeto vazio ou sem as propriedades esperadas, retornar array vazio
      if (Object.keys(response.data).length === 0 || !response.data.id) {
        return NextResponse.json([]);
      }
      
      // Se for um √∫nico objeto, retornar como array
      return NextResponse.json([response.data]);
    }
    
    // Se a resposta n√£o for array nem objeto, retornar array vazio
    return NextResponse.json([]);
    
  } catch (error) {
    console.error('Erro ao buscar hist√≥rico de antecipa√ß√µes:', error);
    
    if (axios.isAxiosError(error)) {
      if (error.response) {
        // O servidor respondeu com um status fora do intervalo 2xx
        console.error('üö® Erro de resposta do backend:', {
          status: error.response.status,
          statusText: error.response.statusText,
          data: error.response.data,
          headers: error.response.headers
        });
        
        // Tratamento espec√≠fico para erro 403
        if (error.response.status === 403) {
          console.error('üö´ Acesso negado (403) - Poss√≠veis causas:');
          console.error('   - Matr√≠cula ou empregador inv√°lidos');
          console.error('   - Usu√°rio sem permiss√£o para acessar hist√≥rico');
          console.error('   - Backend rejeitando requisi√ß√£o por seguran√ßa');
          
          return NextResponse.json(
            { 
              error: 'Acesso negado ao hist√≥rico de antecipa√ß√µes',
              details: 'Verifique se a matr√≠cula e empregador est√£o corretos',
              status: 403
            },
            { status: 403 }
          );
        }
        
        return NextResponse.json(
          { 
            error: `Erro ao buscar hist√≥rico: ${error.response.status}`,
            details: error.response.data || 'Erro desconhecido do servidor'
          },
          { status: error.response.status }
        );
      } else if (error.request) {
        // A requisi√ß√£o foi feita mas n√£o houve resposta
        console.error('üö® Erro de requisi√ß√£o - servidor n√£o respondeu:', error.request);
        return NextResponse.json(
          { error: 'Servidor n√£o respondeu √† solicita√ß√£o' },
          { status: 503 }
        );
      }
    }
    
    // Para outros tipos de erro
    return NextResponse.json(
      { error: 'Erro ao buscar hist√≥rico de antecipa√ß√µes' },
      { status: 500 }
    );
  }
} 