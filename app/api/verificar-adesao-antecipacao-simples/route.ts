import { NextRequest, NextResponse } from 'next/server';

/**
 * API para verificar ades√£o √† Antecipa√ß√£o baseada apenas na EXIST√äNCIA do registro
 * Usa a API espec√≠fica verificar_antecipacao_sasmais.php que retorna todos os campos
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Valida os dados recebidos
    if (!body.codigo) {
      return NextResponse.json(
        { 
          status: 'erro', 
          mensagem: 'C√≥digo do associado √© obrigat√≥rio.',
          jaAderiu: false
        },
        { status: 400 }
      );
    }

    const codigo = body.codigo.toString().trim();
    console.log('üîç Verificando exist√™ncia de ades√£o √† antecipa√ß√£o para c√≥digo:', codigo);

    // Usar a API PHP espec√≠fica para antecipa√ß√£o que retorna todos os campos
    const response = await fetch('https://sas.makecard.com.br/verificar_antecipacao_sasmais.php', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({ codigo }),
      cache: 'no-store'
    });

    if (!response.ok) {
      console.log('‚ö†Ô∏è API PHP n√£o dispon√≠vel, usando fallback');
      return NextResponse.json({
        status: 'sucesso',
        jaAderiu: false,
        mensagem: 'API de antecipa√ß√£o n√£o dispon√≠vel',
        dados: null
      });
    }

    const responseText = await response.text();
    console.log('üì• Resposta da API PHP antecipa√ß√£o:', responseText);

    let data;
    try {
      data = JSON.parse(responseText);
    } catch (parseError) {
      console.error('Erro no parse da resposta:', parseError);
      return NextResponse.json({
        status: 'sucesso',
        jaAderiu: false,
        mensagem: 'Erro ao processar resposta',
        dados: null
      });
    }

    console.log('üìä Analisando resposta da API espec√≠fica de antecipa√ß√£o:');
    console.log('  - Status:', data.status);
    console.log('  - Encontrado:', data.encontrado);
    console.log('  - Dados:', data.dados);

    // Verificar se encontrou registro de antecipa√ß√£o
    let jaAderiu = false;
    let motivo = '';

    if (data.status === 'sucesso' && data.encontrado && data.dados) {
      // Verificar crit√©rios espec√≠ficos para antecipa√ß√£o
      const temAntecipacao = 
        // Nome do documento √© "Contrato de Antecipa√ß√£o Salarial"
        (data.dados.doc_name === 'Contrato de Antecipa√ß√£o Salarial') ||
        // Tipo num√©rico 2 = antecipa√ß√£o (baseado nos logs)
        (data.dados.tipo === 2) ||
        // Has_signed = true E doc_name cont√©m "antecipa√ß√£o"
        (data.dados.has_signed === true && data.dados.doc_name && 
          data.dados.doc_name.toLowerCase().includes('antecip')) ||
        // Event = doc_signed E doc_name de antecipa√ß√£o
        (data.dados.event === 'doc_signed' && data.dados.doc_name && 
          data.dados.doc_name.toLowerCase().includes('contrato de antecip'));

      if (temAntecipacao) {
        jaAderiu = true;
        motivo = 'Encontrado registro de antecipa√ß√£o assinado';
        console.log('‚úÖ Antecipa√ß√£o detectada:', {
          doc_name: data.dados.doc_name,
          has_signed: data.dados.has_signed,
          tipo: data.dados.tipo,
          event: data.dados.event
        });
      } else {
        jaAderiu = false;
        motivo = 'Registro encontrado mas n√£o √© de antecipa√ß√£o';
        console.log('‚ö†Ô∏è Registro encontrado mas n√£o identificado como antecipa√ß√£o:', {
          doc_name: data.dados.doc_name,
          has_signed: data.dados.has_signed,
          tipo: data.dados.tipo,
          event: data.dados.event
        });
      }
    } else {
      jaAderiu = false;
      motivo = 'Nenhum registro de antecipa√ß√£o encontrado';
    }

    console.log(`‚úÖ Verifica√ß√£o de antecipa√ß√£o conclu√≠da - C√≥digo: ${codigo}, Aderiu: ${jaAderiu}, Motivo: ${motivo}`);

    return NextResponse.json({
      status: 'sucesso',
      jaAderiu,
      mensagem: jaAderiu ? 
        `Associado encontrou contrato de antecipa√ß√£o assinado (${motivo})` : 
        `Associado n√£o tem contrato de antecipa√ß√£o assinado (${motivo})`,
      dados: data.dados || null,
      timestamp: Date.now(),
      debug: {
        originalStatus: data.status,
        originalEncontrado: data.encontrado,
        motivoDecisao: motivo,
        antecipacaoAprovada: data.antecipacao_aprovada
      }
    });

  } catch (error) {
    console.error('üí• Erro na verifica√ß√£o de ades√£o √† antecipa√ß√£o:', error);
    
    return NextResponse.json({
      status: 'erro',
      jaAderiu: false,
      mensagem: 'Erro interno do servidor',
      dados: null
    }, { status: 500 });
  }
}

export async function OPTIONS() {
  return NextResponse.json({}, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    }
  });
}