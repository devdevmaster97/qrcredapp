import { NextRequest, NextResponse } from 'next/server';
import axios from 'axios';

export const dynamic = 'force-dynamic';

// Cache para controlar requisi√ß√µes em andamento e rate limiting
const requestsEmAndamento = new Map<string, Promise<any>>();
const ultimasRequisicoes = new Map<string, number>();
const execucaoUnica = new Map<string, boolean>(); // Controle de execu√ß√£o √∫nica
const timestampExecucao = new Map<string, number>(); // Timestamp de execu√ß√£o para controle absoluto

export async function POST(request: NextRequest) {
  try {
    const requestId = request.headers.get('X-Request-ID') || `api_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    console.log(`üö® [${requestId}] API ANTECIPA√á√ÉO CHAMADA - TIMESTAMP:`, new Date().toISOString());
    const body = await request.json();
    
    console.log(`üì• [${requestId}] API Antecipa√ß√£o - Dados recebidos:`, {
      matricula: body.matricula,
      valor_pedido: body.valor_pedido,
      request_id: body.request_id,
      frontend_request_id: requestId
    });
    
    // Criar chave √∫nica para esta solicita√ß√£o
    const chaveUnica = `${body.matricula}_${body.empregador}_${body.valor_pedido}_${body.mes_corrente}`;
    
    const agora = Date.now();
    console.log(`üîë [API] Chave √∫nica gerada: ${chaveUnica}`);
    console.log(`üîí [API] Controle execu√ß√£o √∫nica:`, Array.from(execucaoUnica.entries()));
    console.log(`‚è∞ [API] Timestamp execu√ß√£o:`, Array.from(timestampExecucao.entries()));
    
    // 0. VERIFICA√á√ÉO CR√çTICA BASEADA EM TIMESTAMP (PRIMEIRA LINHA DE DEFESA)
    const ultimoTimestamp = timestampExecucao.get(chaveUnica);
    if (ultimoTimestamp && (agora - ultimoTimestamp) < 5000) { // 5 segundos de prote√ß√£o absoluta
      console.log(`üö® [${requestId}] TIMESTAMP BLOQUEIO ABSOLUTO - solicita√ß√£o ${chaveUnica} executada h√° ${agora - ultimoTimestamp}ms`);
      return NextResponse.json({
        success: false,
        error: 'Solicita√ß√£o muito recente. Aguarde alguns segundos.',
        timestamp_blocked: true,
        tempo_desde_ultima: agora - ultimoTimestamp,
        request_id: requestId
      }, { status: 409 });
    }
    
    // 1. VERIFICA√á√ÉO DE EXECU√á√ÉO √öNICA (SEGUNDA LINHA DE DEFESA)
    if (execucaoUnica.has(chaveUnica)) {
      console.log(`üö® [${requestId}] EXECU√á√ÉO √öNICA BLOQUEIO IMEDIATO - solicita√ß√£o ${chaveUnica} j√° est√° sendo executada`);
      return NextResponse.json({
        success: false,
        error: 'Solicita√ß√£o j√° est√° sendo processada. Aguarde a conclus√£o.',
        execution_blocked: true,
        request_id: requestId
      }, { status: 409 });
    }
    
    // Marcar IMEDIATAMENTE timestamp e execu√ß√£o (ANTES de qualquer outra opera√ß√£o)
    timestampExecucao.set(chaveUnica, agora);
    execucaoUnica.set(chaveUnica, true);
    console.log(`üîê [${requestId}] TIMESTAMP + EXECU√á√ÉO MARCADO IMEDIATAMENTE: ${chaveUnica} em ${agora}`);
    
    console.log(`üìã [API] Cache rate limiting atual:`, Array.from(ultimasRequisicoes.entries()));
    console.log(`üîÑ [API] Requisi√ß√µes em andamento:`, Array.from(requestsEmAndamento.keys()));
    
    // 2. VERIFICAR RATE LIMITING (60 segundos - mais rigoroso para evitar duplica√ß√£o)
    const ultimaRequisicao = ultimasRequisicoes.get(chaveUnica);
    if (ultimaRequisicao && (agora - ultimaRequisicao) < 60000) { // 60 segundos
      const tempoRestante = Math.ceil((60000 - (agora - ultimaRequisicao)) / 1000);
      console.log(`‚è∞ [API] Rate limit ativo para ${chaveUnica}. √öltima: ${ultimaRequisicao}, Agora: ${agora}, Diferen√ßa: ${agora - ultimaRequisicao}ms, Tempo restante: ${tempoRestante}s`);
      
      // Limpar execu√ß√£o √∫nica e timestamp se rate limited
      execucaoUnica.delete(chaveUnica);
      timestampExecucao.delete(chaveUnica);
      console.log(`üßπ [LIMPEZA] Rate limit - removido execu√ß√£o e timestamp: ${chaveUnica}`);
      
      return NextResponse.json({
        success: false,
        error: `Aguarde ${tempoRestante} segundos antes de fazer nova solicita√ß√£o similar`,
        rate_limited: true,
        tempo_restante: tempoRestante
      }, { status: 429 });
    } else {
      console.log(`‚úÖ [API] Rate limiting OK para ${chaveUnica}. √öltima requisi√ß√£o: ${ultimaRequisicao ? new Date(ultimaRequisicao).toISOString() : 'nunca'}`);
    }
    
    // 2. VERIFICAR SE J√Å EXISTE REQUISI√á√ÉO EM ANDAMENTO (CR√çTICO PARA EVITAR DUPLICA√á√ÉO)
    if (requestsEmAndamento.has(chaveUnica)) {
      console.log(`üîÑ [ANTI-DUPLICA√á√ÉO] Requisi√ß√£o j√° em andamento para ${chaveUnica}. Bloqueando requisi√ß√£o duplicada.`);
      // Limpar execu√ß√£o √∫nica e timestamp se j√° h√° requisi√ß√£o em andamento
      execucaoUnica.delete(chaveUnica);
      timestampExecucao.delete(chaveUnica);
      console.log(`üßπ [LIMPEZA] Requisi√ß√£o em andamento - removido execu√ß√£o e timestamp: ${chaveUnica}`);
      
      return NextResponse.json({
        success: false,
        error: 'Solicita√ß√£o j√° est√° sendo processada. Aguarde a conclus√£o.',
        duplicate_blocked: true
      }, { status: 409 }); // 409 Conflict
    }
    
    // 3. MARCAR RATE LIMITING ANTES DE PROCESSAR (CR√çTICO PARA EVITAR DUPLICA√á√ÉO)
    console.log(`üîí [API] Marcando rate limiting ANTES do processamento para ${chaveUnica} em ${agora}`);
    ultimasRequisicoes.set(chaveUnica, agora);
    
    // 4. VERIFICA√á√ÉO ADICIONAL: Aguardar 100ms para garantir que n√£o h√° requisi√ß√µes simult√¢neas
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // Verificar novamente se n√£o foi criada uma requisi√ß√£o em andamento durante o delay
    if (requestsEmAndamento.has(chaveUnica)) {
      console.log(`üö® [ANTI-DUPLICA√á√ÉO] Requisi√ß√£o criada durante delay para ${chaveUnica}. Bloqueando.`);
      // Limpar execu√ß√£o √∫nica e timestamp se detectou duplicata durante delay
      execucaoUnica.delete(chaveUnica);
      timestampExecucao.delete(chaveUnica);
      console.log(`üßπ [LIMPEZA] Duplicata durante delay - removido execu√ß√£o e timestamp: ${chaveUnica}`);
      
      return NextResponse.json({
        success: false,
        error: 'Solicita√ß√£o duplicada detectada durante processamento',
        duplicate_blocked_delay: true
      }, { status: 409 });
    }
    
    // 5. CRIAR PROMISE PARA ESTA REQUISI√á√ÉO
    console.log(`üöÄ [API] Criando promise de processamento para ${chaveUnica}`);
    const promiseRequisicao = processarSolicitacao(body, chaveUnica);
    requestsEmAndamento.set(chaveUnica, promiseRequisicao);
    
    try {
      const resultado = await promiseRequisicao;
      return resultado;
    } finally {
      // Limpar cache ap√≥s processamento
      requestsEmAndamento.delete(chaveUnica);
      execucaoUnica.delete(chaveUnica);
      timestampExecucao.delete(chaveUnica);
      console.log(`üßπ [LIMPEZA FINAL] Removido todos os controles para ${chaveUnica}`);
    }
    
  } catch (error) {
    console.error('üí• Erro na API de antecipa√ß√£o:', error);
    
    // Limpar todos os controles em caso de erro
    console.log(`üßπ [LIMPEZA GERAL] Erro - removendo todos os controles`);
    execucaoUnica.clear();
    timestampExecucao.clear();
    
    return NextResponse.json({
      success: false,
      error: 'Erro interno do servidor'
    }, { 
      status: 500,
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
  }
}

async function processarSolicitacao(body: any, chaveUnica: string) {
  try {
    console.log(`üöÄ [ANTI-DUPLICA√á√ÉO] Processando solicita√ß√£o ${chaveUnica} - Verifica√ß√£o rigorosa ativa`);
    
    console.log(`üîç [${chaveUnica}] Processando solicita√ß√£o com prote√ß√£o anti-duplica√ß√£o ativa`);
    
    // Validar campos obrigat√≥rios
    const camposObrigatorios = ['matricula', 'pass', 'empregador', 'valor_pedido', 'taxa', 'valor_descontar', 'mes_corrente', 'chave_pix'];
    
    console.log(`üîç [${chaveUnica}] Validando campos obrigat√≥rios:`, {
      matricula: body.matricula,
      pass: body.pass ? '[PRESENTE]' : '[AUSENTE]',
      empregador: body.empregador,
      valor_pedido: body.valor_pedido,
      taxa: body.taxa,
      valor_descontar: body.valor_descontar,
      mes_corrente: body.mes_corrente,
      chave_pix: body.chave_pix
    });
    
    for (const campo of camposObrigatorios) {
      if (!body[campo] && body[campo] !== 0) { // Permitir valor 0 para campos num√©ricos
        console.log(`‚ùå [${chaveUnica}] Campo obrigat√≥rio ausente: ${campo} (valor: ${body[campo]})`);
        return NextResponse.json({
          success: false,
          error: `Campo obrigat√≥rio ausente: ${campo}`,
          campo_ausente: campo,
          dados_recebidos: Object.keys(body)
        }, { 
          status: 400,
          headers: {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
          }
        });
      }
    }
    
    // Preparar dados para envio ao PHP
    const formData = new URLSearchParams();
    formData.append('matricula', body.matricula || '');
    formData.append('pass', body.pass);
    formData.append('empregador', (body.empregador || 0).toString());
    formData.append('valor_pedido', body.valor_pedido);
    formData.append('taxa', body.taxa);
    formData.append('valor_descontar', body.valor_descontar);
    formData.append('mes_corrente', body.mes_corrente || '');
    formData.append('chave_pix', body.chave_pix);
    formData.append('id', (body.id || 0).toString());
    formData.append('id_divisao', (body.id_divisao || 0).toString());
    
    console.log(`üåê [${chaveUnica}] Enviando para PHP grava_antecipacao_app.php:`, Object.fromEntries(formData));
    
    console.log(`üîí [ANTI-DUPLICA√á√ÉO] Enviando para PHP com prote√ß√£o ativa`);
    
    // VERIFICA√á√ÉO CR√çTICA: Marcar que esta requisi√ß√£o est√° prestes a chamar o PHP
    const timestampEnvio = Date.now();
    const requestId = `${timestampEnvio}_${Math.random().toString(36).substr(2, 9)}`;
    console.log(`üö® [CR√çTICO] INICIANDO CHAMADA PHP - RequestID: ${requestId} - Chave: ${chaveUnica} - Timestamp: ${timestampEnvio}`);
    console.log(`üìã [DADOS PHP] RequestID: ${requestId} - Dados enviados:`, Object.fromEntries(formData));
    
    // Fazer chamada para o PHP com ID √∫nico
    const response = await axios.post(
      'https://sas.makecard.com.br/grava_antecipacao_app.php',
      formData,
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0',
          'X-Request-ID': requestId, // ID √∫nico para rastrear no PHP
          'X-Chave-Unica': chaveUnica // Chave √∫nica para debug
        },
        timeout: 15000,
        validateStatus: () => true // N√£o rejeitar por status HTTP
      }
    );
    
    const timestampResposta = Date.now();
    const tempoProcessamento = timestampResposta - timestampEnvio;
    
    console.log(`üì• [RESPOSTA PHP] RequestID: ${requestId} - Status: ${response.status} - Tempo: ${tempoProcessamento}ms`);
    console.log(`üìã [DADOS RESPOSTA] RequestID: ${requestId} - Data:`, response.data);
    console.log(`‚úÖ [CR√çTICO] CHAMADA PHP CONCLU√çDA - RequestID: ${requestId} - Chave: ${chaveUnica} - Timestamp: ${timestampResposta}`);
    
    // Verificar se houve erro (incluindo erros de duplicata da trigger)
    const temErro = response.status >= 400 ||
                   response.data.success === false || 
                   response.data.success === "false" ||
                   (response.data.message && (
                     response.data.message.toLowerCase().includes("erro") ||
                     response.data.message.toLowerCase().includes("senha") ||
                     response.data.message.toLowerCase().includes("incorreta") ||
                     response.data.message.toLowerCase().includes("inv√°lida") ||
                     response.data.message.toLowerCase().includes("falhou") ||
                     response.data.message.toLowerCase().includes("negado") ||
                     response.data.message.toLowerCase().includes("duplicata") ||
                     response.data.message.toLowerCase().includes("duplicidade") ||
                     response.data.message.toLowerCase().includes("duplicate")
                   ));
    
    if (temErro) {
      const mensagem = response.data.message || 'Erro ao processar solicita√ß√£o';
      console.log(`‚ùå [${chaveUnica}] Erro detectado:`, mensagem);
      
      // Remover do rate limiting se deu erro para permitir nova tentativa
      ultimasRequisicoes.delete(chaveUnica);
      
      return NextResponse.json({
        success: false,
        error: mensagem,
        data: response.data
      }, { 
        status: response.status >= 400 ? response.status : 400,
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });
    }
    
    // Sucesso - verificar se realmente foi bem-sucedido (detec√ß√£o mais flex√≠vel)
    const isSuccess = response.status === 200 || 
                     response.data.success === true || 
                     response.data.success === "true" ||
                     response.data.success === 1 ||
                     response.data.success === "1" ||
                     response.data.id ||
                     response.data.situacao === 1 ||
                     response.data.situacao === "1" ||
                     (response.data.message && (
                       response.data.message.toLowerCase().includes("sucesso") ||
                       response.data.message.toLowerCase().includes("inseridos") ||
                       response.data.message.toLowerCase().includes("processada") ||
                       response.data.message.toLowerCase().includes("gravado") ||
                       response.data.message.toLowerCase().includes("salvo")
                     )) ||
                     // Se n√£o h√° erro expl√≠cito e status HTTP √© 200, considerar sucesso
                     (response.status === 200 && !temErro);
    
    if (isSuccess) {
      console.log(`‚úÖ [${chaveUnica}] Antecipa√ß√£o gravada com sucesso`);
      return NextResponse.json({
        success: true,
        data: response.data,
        message: response.data.message || 'Solicita√ß√£o processada com sucesso',
        id: response.data.id,
        duplicate_prevented: response.data.duplicate_prevented
      }, {
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });
    } else {
      // Resposta amb√≠gua - tratar como erro
      console.log(`‚ùå [${chaveUnica}] Resposta amb√≠gua do PHP:`, response.data);
      ultimasRequisicoes.delete(chaveUnica);
      
      return NextResponse.json({
        success: false,
        error: response.data.message || 'Resposta inesperada do servidor',
        data: response.data
      }, { 
        status: 400,
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });
    }
    
  } catch (error) {
    console.error(`üí• [${chaveUnica}] Erro no processamento:`, error);
    
    // Remover do rate limiting se deu erro para permitir nova tentativa
    ultimasRequisicoes.delete(chaveUnica);
    
    let errorMessage = 'Erro interno do servidor';
    let statusCode = 500;
    
    if (axios.isAxiosError(error)) {
      if (error.code === 'ECONNABORTED') {
        errorMessage = 'Timeout na conex√£o com o servidor';
        statusCode = 408;
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
        statusCode = error.response.status || 500;
      } else if (error.message) {
        errorMessage = error.message;
      }
    }
    
    return NextResponse.json({
      success: false,
      error: errorMessage
    }, { 
      status: statusCode,
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
  }
}
